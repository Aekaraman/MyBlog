// <auto-generated />
using System;
using BlogInstance.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlogInstance.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    partial class BlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogInstance.DataAccess.Entities.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThumbNail")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("ArticleID");

                    b.HasIndex("UserID");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleID = 1,
                            CommentCount = 0,
                            Content = "Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan de Finibus Bonorum et Malorum (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan Lorem ipsum dolor sit amet 1.10.32 sayılı bölümdeki bir satırdan gelmektedir.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 4, 13, 0, 23, 41, 49, DateTimeKind.Local).AddTicks(3357),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 4, 13, 0, 23, 41, 49, DateTimeKind.Local).AddTicks(3361),
                            ThumbNail = "Default.jpg",
                            Title = "C# 9.0 ve .NET 5 Yenilikleri",
                            UserID = 1,
                            ViewsCount = 35
                        });
                });

            modelBuilder.Entity("BlogInstance.DataAccess.Entities.ArticleAndCategory", b =>
                {
                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("ArticleID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ArticleAndCategories");
                });

            modelBuilder.Entity("BlogInstance.DataAccess.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryDescription = "C# Programlama Dili ile İlgili En Güncel Bilgiler ",
                            CategoryName = "C#",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 4, 13, 0, 23, 41, 47, DateTimeKind.Local).AddTicks(4640),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 4, 13, 0, 23, 41, 47, DateTimeKind.Local).AddTicks(4645)
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryDescription = "JavaScript Programlama Dili ile İlgili En Güncel Bilgiler ",
                            CategoryName = "JavaScript",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 4, 13, 0, 23, 41, 47, DateTimeKind.Local).AddTicks(4676),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 4, 13, 0, 23, 41, 47, DateTimeKind.Local).AddTicks(4677)
                        });
                });

            modelBuilder.Entity("BlogInstance.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 4, 13, 0, 23, 41, 50, DateTimeKind.Local).AddTicks(6700),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 4, 13, 0, 23, 41, 50, DateTimeKind.Local).AddTicks(6706),
                            RoleDescription = "Admin Rolü, Tüm Haklara Sahiptir.",
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("BlogInstance.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte[]>("UserPassword")
                        .IsRequired()
                        .HasColumnType("VARBINARY(500)");

                    b.Property<string>("UserThumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 4, 13, 0, 23, 41, 45, DateTimeKind.Local).AddTicks(2198),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 4, 13, 0, 23, 41, 45, DateTimeKind.Local).AddTicks(2485),
                            RoleId = 1,
                            UserDescription = "İlk admin Kullanıcı",
                            UserEmail = "aekaramanofficial@gmail.com",
                            UserFirstName = "Emre",
                            UserLastName = "Karaman",
                            UserName = "aekaraman",
                            UserPassword = new byte[] { 102, 49, 98, 51, 99, 49, 98, 52, 99, 48, 51, 51, 53, 101, 54, 57, 48, 54, 101, 101, 48, 100, 99, 102, 57, 54, 100, 48, 98, 54, 49, 55 }
                        });
                });

            modelBuilder.Entity("BlogInstance.DataAccess.Entities.UserAndCategory", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("UserAndCategories");
                });

            modelBuilder.Entity("BlogInstance.DataAccess.Entities.Article", b =>
                {
                    b.HasOne("BlogInstance.DataAccess.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogInstance.DataAccess.Entities.ArticleAndCategory", b =>
                {
                    b.HasOne("BlogInstance.DataAccess.Entities.Article", "Article")
                        .WithMany("ArticleAndCategories")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogInstance.DataAccess.Entities.Category", "Category")
                        .WithMany("ArticleAndCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogInstance.DataAccess.Entities.User", b =>
                {
                    b.HasOne("BlogInstance.DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogInstance.DataAccess.Entities.UserAndCategory", b =>
                {
                    b.HasOne("BlogInstance.DataAccess.Entities.Category", "Category")
                        .WithMany("UserAndCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogInstance.DataAccess.Entities.User", "User")
                        .WithMany("UserAndCategories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
